<script>
  var dataBySchema = {};
</script>
<div class='container'>
  <h1>Scenario operations graph</h1>
  <div id="scenarios_graph"></div>
  <% for(var schema in statistics) { %>
  <% 
    var execution = null

    for(var i = 0; i < schemas.length; i++) {
      if(schemas[i].schema.name == schema) {
        execution = schemas[i].execution.distribution;
      }
    }
  %>
  <h2><%= schema %></h2>
  <h3>Execution parameters</h3>
  <table class="table table-striped table-hover table-condensed table-bordered">
    <tbody>
      <tr>
        <td>Number of processes</td>
        <td><%= argv.n %></td>
        <td></td>
      </tr>
      <tr>
        <td>Resolution</td>
        <td><%= execution.resolution %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>Number of iterations</td>
        <td><%= execution.iterations %></td>
        <td></td>
      </tr>
      <tr>
        <td>Numbers of users per process per iteration</td>
        <td><%= execution.numberOfUsers %></td>
        <td></td>
      </tr>
      <tr>
        <td>Total number of users per iteration</td>
        <td><%= execution.numberOfUsers * argv.n %></td>
        <td></td>
      </tr>
    </tbody>
  </table>

  <h3>Statistics</h3>
  <table class="table table-striped table-hover table-condensed table-bordered">
    <tbody>
      <tr>
        <td>Total Runtime</td>
        <td><%= Math.round(general.totalTimeMS)/1000 %></td>
        <td>seconds</td>
      </tr>
      <tr>
        <td>Mean</td>
        <td><%= Math.round(fastStatistics[schema].amean())/1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>Standard Deviation</td>
        <td><%= Math.round(fastStatistics[schema].Ïƒ()) / 1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>75 percentile</td>
        <td><%= Math.round(fastStatistics[schema].percentile(75))/1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>95 percentile</td>
        <td><%= Math.round(fastStatistics[schema].percentile(95))/1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>99 percentile</td>
        <td><%= Math.round(fastStatistics[schema].percentile(99))/1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>Minimum</td>
        <td><%= fastStatistics[schema].range()[0]/1000 %></td>
        <td>milliseconds</td>
      </tr>
      <tr>
        <td>Maximum</td>
        <td><%= fastStatistics[schema].range()[1]/1000 %></td>
        <td>milliseconds</td>
      </tr>
    </tbody>
  </table>
  <script>
  <%
    // // Filtered entries
    // var filtered = {};
    // // Filter all the redundant data out of the full data set
    // for(var name in entries) {
    //   filtered[name] = entries[name]);
    // } 
  %>dataBySchema = <%- JSON.stringify(entries) %>;
  </script>
  <% } %>
</div>

<!-- Generate the graph -->
<script>
    var names = [<%- Object.keys(statistics).map(function(x) { return '"' + x + '"'; }).join(',') %>];

    // Start and end point
    var startPoint = Number.MAX_VALUE;
    var endPoint = 0;
    
    // Create a dataset with items
    var dataset = new vis.DataSet({
        type: {start: 'ISODate', end: 'ISODate' }
    });

    // Set and start points
    var container = document.getElementById('scenarios_graph');

    // Clear the data set
    dataset.clear();

    // Dataset data
    var dataArray = [];
    // Index of data item in set
    var i = 0;
    // Create the groups
    var groups = new vis.DataSet();
    // Add all the groups
    for(var groupId = 0; groupId < names.length; groupId++) {
      groups.add({
        id: groupId, content: names[groupId], options: {}
      });

      // Load the data
      var data = dataBySchema[names[groupId]];
      console.dir(data)

      // Iterate over all the data points
      for(var j = 0; j < data.length; j++) {
        var obj = data[j];
        var date = new Date();
        date.setTime(parseInt(obj.timestamp, 10));

        // Adjust start and end point
        if(date.getTime() < startPoint) startPoint = date;
        if(date.getTime() > endPoint) endPoint = date;

        // Push to array
        dataArray.push({
          id: i++, x: date, y: data[j].count, group: groupId
        });
      }
    }

    // Set the data for the graph
    dataset.add(dataArray);

    // Graph charting examples
    var options = {
      defaultGroup: 'ungrouped',
      legend: true,
      sampling: true,
      catmullRom: false,
      start: moment(startPoint),
      end: moment(endPoint),
      clickToUse: true
    };

    // Create graph
    var graph2d = new vis.Graph2d(container, dataset, groups, options);
</script>