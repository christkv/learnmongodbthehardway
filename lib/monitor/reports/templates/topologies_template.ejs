<script>
  var entries = <%- JSON.stringify(entries) %>;
  var names = [<%- Object.keys(entries).map(function(x) { return '"' + x + '"'; }).join(',') %>];
</script>

<!-- Graphics container -->
<div class='container'>
  <h1>Server Topology Graphs</h1>
  <% for(var member in entries) { %>
    <h2><%= member %></h2>
    <hr/>
    <% 
      var keys = Object.keys(entries[member]);
      var numberOfEntries = entries[member][keys[0]].length;
    %>
      <table width="100%">
        <% for(var i = 0; i < numberOfEntries; i++) { %>
        <tr>
          <td valign='top'>
            <h4><%= entries[member][keys[0]][i].server %></h4>
            <div id="<%= member %>_ops_graph_<%= i %>"></div>
          </td>
          <td valign='top' id='<%= member %>_ops_graph_values_<%= i %>'>
          </td>
        </tr>
        <% } %>
      </table>
  <% } %>
</div>

<!-- Graph generation -->
<script>
var generateGraph = function(container, groupEntries, data, transform, mergeOptions) {
  // Create a dataset with items
  var dataset = new vis.DataSet({
    type: {start: 'ISODate', end: 'ISODate' }
  });

  // Start and end point
  var startPoint = Number.MAX_VALUE;
  var endPoint = 0;
  mergeOptions = mergeOptions == null ? {} : mergeOptions;

  // Clear the data set
  dataset.clear();

  // Create the groups
  var groups = new vis.DataSet();
  // Add the group entries
  for(var i = 0; i < groupEntries.length; i++) {
    groups.add(groupEntries[i]);
  }

  // Data array
  var dataArray = [];
  var i = 0;

  // Iterate over all the data
  for(var timestamp in data) {
    // Extract the data
    var extractedPoint = transform(data[timestamp]);
    // Skip the first result
    if(extractedPoint == null) continue;

    // Parse timestamp
    var date = moment(timestamp);
    var unixTime = date.unix();
    // Set date by unix time
    date = new Date();
    date.setTime(unixTime);

    // Adjust start and end point
    if(date.getTime() < startPoint) startPoint = date;
    if(date.getTime() > endPoint) endPoint = date;

    // For each point extract the values
    for(var name in extractedPoint) {
      dataArray.push({
        id: i++, x: date, y: extractedPoint[name], group: name
      });      
    }
  }

  // Graph charting examples
  var options = {
    defaultGroup: 'ungrouped',
    legend: true,
    sampling: true,
    catmullRom: false,
    start: moment(startPoint),
    end: moment(endPoint),
    height: 200,
    width: 400,
    clickToUse: true
  };

  // Merge in overrides
  for(var name in mergeOptions) {
    options[name] = mergeOptions[name];
  }

  // Add the data
  dataset.add(dataArray);
  // Create graph
  var graph2d = new vis.Graph2d(container, dataset, groups, options);
}
</script>

<!-- Generate graphs -->
<script>
  // Generate ops graphs
  <% for(var member in entries) { %>
    var member = '<%- member %>';
    // The last measurement
    var lastMeasurement = null;
    // Generate groups
    var groupNames = ['insert', 'query', 'update', 'delete', 'getmore', 'command'];
    var groups = groupNames.map(function(x) {
      return {id: x, content: x, options: {}};
    });

    // How many entries do we have
    var keys = Object.keys(entries[member]);
    var numberOfEntries = entries[member][keys[0]].length;

    //
    // 
    // Draw ops counter graph
    var drawOpsGraph = function(_i, containerId) {
      var lastMeasurement = null;
      // Keys
      var keys = Object.keys(entries[member]);
      // Get a document
      var server = entries[member][keys[0]][_i].server;
      // Get the ops container
      var container = document.getElementById(containerId);
      
      // Create the groups
      var groups = groupNames.map(function(x) {
        return {id: x, content: x, options: {}};
      });

      generateGraph(container, groups, entries[member], function(data) {
        // Locate the opcounters
        var opcounters = null;

        for(var i = 0; i < data.length; i++) {
          if(data[i].server == server) {
            opcounters = data[i].result.opcounters;
            break;
          }
        }

        // Throw away the first result
        if(lastMeasurement == null) {
          lastMeasurement = opcounters;
          return null;
        }

        // Final Ops counters
        var finalValues = {}
        // Calculate the diff between the two (actual ops that happened)
        for(var name in opcounters) {        
          finalValues[name] = opcounters[name] - lastMeasurement[name];
        }

        // Update last measurement
        lastMeasurement = opcounters;
        // Return the values
        return finalValues;
      });
    }

    //
    // Draw a graph for a single metric
    var drawSingleValueGraph = function(_i, field, containerId, fieldName, title) {
      // Keys
      var keys = Object.keys(entries[member]);
      // Get a document
      var server = entries[member][keys[0]][_i].server;

      // Split the field
      var fieldNames = field.split('.');
      var doc = entries[member][keys[0]][_i].result;
      var name = null;

      while(fieldNames.length > 0) {
        name = fieldNames.shift();
        if(doc[name] == null) return;
        doc = doc[name];
      }

      // Get the ops container
      var container = document.getElementById(containerId);

      // Create the wrapping graph div
      var main = document.createElement("div");
      var h4 = document.createElement("h4");
      h4.innerHTML = title;
      main.appendChild(h4);
      
      // Create the graph container div
      var div = document.createElement("div");      
      div.setAttribute('id', 'containerId_' + fieldName);
      main.appendChild(div);

      // Add to the container
      container.appendChild(main);

      // Create the groups
      var groups = [fieldName].map(function(x) {
        return {id: x, content: x, options: {}};
      });

      // Generate the graph
      generateGraph(div, groups, entries[member], function(data) {
        var results = null;
        // Get the correct result
        for(var i = 0; i < data.length; i++) {
          if(data[i].server == server) {
            results = data[i].result;
            break;
          }
        }

        // Split the filed
        var fieldNames = field.split('.');
        var doc = results;
        var name = null;

        while(fieldNames.length > 0) {
          name = fieldNames.shift();
          doc = doc[name];
        }

        // Add to groups
        var result = {};
        result[fieldName] = doc;
        return result;
      }, {
          height: 50
        , width: 400
        , dataAxis: { 
          visible: true,
          customRange: {
            left: {
              min: 0
            }
          }
        }
        , legend: false
        , showCurrentTime: false
        , showMajorLabels: false
        , showMinorLabels: false
      });
    }

    // Values we wish to render for the graph
    var values = [
        { field: 'metrics.cursor.open.total', title: 'Open cursors', group: 'cursors' }
      , { field: 'connections.current', title: 'Current connections', group: 'connections' }
      , { field: 'connections.available', title: 'Available connections', group: 'connections' }
      , { field: 'backgroundFlushing.flushes', title: 'Background flushes', group: 'backgroundFlushes' }
      , { field: 'backgroundFlushing.average_ms', title: 'Background flushes Average MS', group: 'averageMS' }
      , { field: 'mem.resident', title: 'Resident memory', group: 'resident' }
      , { field: 'mem.virtual', title: 'Virtual memory', group: 'virtual' }
      , { field: 'mem.mapped', title: 'Mapped memory', group: 'mapped' }
      , { field: 'mem.mappedWithJournal', title: 'Mapped memory with journal', group: 'mappedWithJournal' }
      // Wired tiger fields
      , { field: 'wiredTiger.session.open cursor count', title: 'WT open cursor count', group: 'wtOpenCursorCount' }      
      , { field: 'wiredTiger.session.open session count', title: 'WT open session count', group: 'wtOpenSessionCount' }      
    ];

    // If we have replicaset members render them
    // Iterate over all the entries
    for(var i = 0; i < numberOfEntries; i++) {   
      // Iterate over all the fields we want to expose
      for(var j = 0; j < values.length; j++) {
      // Draw the number of open cursors     
      drawSingleValueGraph(i, values[j].field, member + "_ops_graph_values_" + i, values[j].group, values[j].title);
      }

      // Draw ops graph
      drawOpsGraph(i, member + "_ops_graph_" + i);
    }
  <% } %>
</script>